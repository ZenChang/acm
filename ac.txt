/*
开门人和关门人
Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 65536/32768 K (Java/Others)
Total Submission(s): 4086 Accepted Submission(s): 1966


Problem Description
每天第一个到机房的人要把门打开，最后一个离开的人要把门关好。现有一堆杂乱的机房签
到、签离记录，请根据记录找出当天开门和关门的人。



Input
测试输入的第一行给出记录的总天数N ( > 0 )。下面列出了N天的记录。
每天的记录在第一行给出记录的条目数M ( > 0 )，下面是M行，每行的格式为

证件号码 签到时间 签离时间

其中时间按“小时:分钟:秒钟”（各占2位）给出，证件号码是长度不超过15的字符串。



Output
对每一天的记录输出1行，即当天开门和关门人的证件号码，中间用1空格分隔。
注意：在裁判的标准测试输入中，所有记录保证完整，每个人的签到时间在签离时间之前，
且没有多人同时签到或者签离的情况。



Sample Input
3
1
ME3021112225321 00:00:00 23:59:59
2
EE301218 08:05:35 20:56:35
MA301134 12:35:45 21:40:42
3
CS301111 15:30:28 17:00:10
SC3021234 08:00:00 11:25:25
CS301133 21:45:00 21:58:40

Sample Output
ME3021112225321 ME3021112225321
EE301218 MA301134
SC3021234 CS301133


Source
浙大计算机研究生复试上机考试-2005年


Recommend
JGShining


*/

/*
C语言：getchar();gets(char * s); // s包括'\n'
C++: cin.get();getline(cin, string s); s不包括'\n'
*/
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

struct MY_STRUCT
{
    string id;
    string start;
    string end;
};

bool cmp_inc ( MY_STRUCT a , MY_STRUCT b )
{
    return a.start < b.start;
}

bool cmp_desc ( MY_STRUCT a , MY_STRUCT b )
{
    return a.end > b.end;
}

int main ( )
{
    int N = 0;
    scanf ( "%d" , &N );
    for ( int i = 0; i < N; ++i )
    {
        int M = 0;
        scanf ( "%d" , &M );
        cin.get ( );
        vector<MY_STRUCT> my_vec;
        for ( int j = 0; j < M; ++j )
        {
            MY_STRUCT my_struct;
            cin >> my_struct.id;
            cin >> my_struct.start;
            cin >> my_struct.end;

            my_vec.push_back ( my_struct );
        }
        sort ( my_vec.begin ( ) , my_vec.end ( ) , cmp_inc );
        cout << my_vec.begin ( )->id << " ";
        sort ( my_vec.begin ( ) , my_vec.end ( ) , cmp_desc );
        cout << my_vec.begin ( )->id << endl;
    }

    return 0;
}

