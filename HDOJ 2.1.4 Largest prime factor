/*
Largest prime factor
Time Limit: 5000/1000 MS (Java/Others) Memory Limit: 32768/32768 K (Java/Others)
Total Submission(s): 7143 Accepted Submission(s): 2167


Problem Description
Everybody knows any number can be combined by the prime number.
Now, your task is telling me what position of the largest prime factor.
The position of prime 2 is 1, prime 3 is 2, and prime 5 is 3, etc.
Specially, LPF(1) = 0.



Input
Each line will contain one integer n(0 < n < 1000000).



Output
Output the LPF(n).



Sample Input
1
2
3
4
5

Sample Output
0
1
2
1
3

Author
Wiskey


Source
HDU 2007-11 Programming Contest_WarmUp


Recommend
威士忌


Answer
这题必须使用c语言的输入输出，否则会超时

这题首先要打表，否则会超时

这题打表时使用了筛选法进行最大质因子的位置的存储，类似于筛选法打印素数表

*/
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

struct MY_STRUCT
{
    int A;
    int B;
};

bool cmp ( MY_STRUCT st_1 , MY_STRUCT st_2 )
{
    return ( st_1.A - st_1.B ) < (st_2.A - st_2.B );
}

bool is_prime ( int value )
{
    if ( 1 == value )
    {
        return false;
    }

    if ( 2 == value || 3 == value )
    {
        return true;
    }

    if (6 < value )
    {
        if ( 1 != value % 6 && 5 != value % 6 )
        {
            return false;
        }
    }

    for ( int i = 2; i <= sqrt ( ( double ) ( value ) ); ++i )
    {
        if ( 0 == value % i )
        {
            return false;
        }
    }

    return 1;
}

int gcd ( int a , int b )
{
    if ( 0 == b )
    {
        return a;
    }

    return gcd ( b , a % b );
}

const static int MAX_SIZE = 1000000;
int table [ MAX_SIZE ];

int PrintTable ( int table [ ])
{
    int index = 1;
    for ( int i = 2; i < MAX_SIZE; ++i)
    {
        if (0 == table[i ] ) // 目前新遇到的非合数
        {
            for ( int j = 1; j * i < MAX_SIZE; ++j )
            {
                table [ i * j ] = index;
            }
            ++index;
        }
    }

    //for ( int i = 0; i < MAX_SIZE; ++i )
    //{
    //    cout << table [ i ] << endl;
    //}
    return 0;
}
// 打印素数表
//int PrintTable ( int table [ ])
//{
//    memset ( table , 0 , MAX_SIZE );
//    for ( int i = 2; i < MAX_SIZE; ++i)
//    {
//        if (0 == table[i ] ) // 目前新遇到的非合数
//        {
//            for ( int j = 2; j * i < MAX_SIZE; ++j )
//            {
//                table [ i * j ] = -1;
//            }
//        }
//    }
//
//    for ( int i = 2; i < MAX_SIZE; ++i )
//    {
//        cout << i << ":";
//        if ( -1 == table [ i ] )
//        {
//            cout << "is not prime" << endl;
//        }
//        else
//        {
//            cout << "is prime" << endl;
//        }
//    }
//    return 0;
//}


int main ( )
{
    PrintTable ( table );
    int n = 0;
    while ( ~scanf("%d", &n ))
    {
        printf ( "%d\n" , table [ n ] );
    }

    return 0;
}

