/*
Crixalis's Equipment
Time Limit: 2000/1000 MS (Java/Others) Memory Limit: 32768/32768 K (Java/Others)
Total Submission(s): 4138 Accepted Submission(s): 1249


Problem Description
Crixalis - Sand King used to be a giant scorpion(蝎子) in the deserts of Kalimdor. Though he's a guardian of Lich King now, he keeps the living habit of a scorpion like living underground and digging holes.

Someday Crixalis decides to move to another nice place and build a new house for himself (Actually it's just a new hole). As he collected a lot of equipment, he needs to dig a hole beside his new house to store them. This hole has a volume of V units, and Crixalis has N equipment, each of them needs Ai units of space. When dragging his equipment into the hole, Crixalis finds that he needs more space to ensure everything is placed well. Actually, the ith equipment needs Bi units of space during the moving. More precisely Crixalis can not move equipment into the hole unless there are Bi units of space left. After it moved in, the volume of the hole will decrease by Ai. Crixalis wonders if he can move all his equipment into the new hole and he turns to you for help.



Input
The first line contains an integer T, indicating the number of test cases. Then follows T cases, each one contains N + 1 lines. The first line contains 2 integers: V, volume of a hole and N, number of equipment respectively. The next N lines contain N pairs of integers: Ai and Bi.
0<T<= 10, 0<V<10000, 0<N<1000, 0 <Ai< V, Ai <= Bi < 1000.



Output
For each case output "Yes" if Crixalis can move all his equipment into the new hole or else output "No".


Sample Input
2

20 3
10 20
3 10
1 7

10 2
1 10
2 11

Sample Output
Yes
No


Source
HDU 2009-10 Programming Contest


Recommend
lcy

answer:

(a1, b1) (a2, b2)

如果 先1后2 满足 , 而 先2后1 不满足

那么 先1后2 消耗的体积 < 先2后1 消耗的体积

那么 max(b1, a1 + b2) < max(b2, b1 + a2)

那么 要想等式成立

那么 a1 + b2 < b1 + a2 (b2 不可能大于 a1 + b2, 所以只有b1 + a2比较大才行)

那么 a1 - b1 < a2 - b2



*/
#include <stdio.h>
#include <stdlib.h>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
using namespace std;

struct MY_STRUCT
{
    int A;
    int B;
};

bool cmp ( MY_STRUCT st_1 , MY_STRUCT st_2 )
{
    return ( st_1.A - st_1.B ) < (st_2.A - st_2.B );
}

int main ( )
{
    int T = 0;
    cin >> T;
    for ( int i = 0; i < T; ++i )
    {
        int V = 0;
        int N = 0;
        cin >> V >> N;
        vector<MY_STRUCT> my_vec;
        for ( int j = 0; j < N; ++j )
        {
            MY_STRUCT st_struct = { 0 };
            cin >> st_struct.A >> st_struct.B;
            my_vec.push_back ( st_struct );
        }
        sort ( my_vec.begin(), my_vec.end(), cmp);

        bool is_yes = true;
        for ( vector<MY_STRUCT>::const_iterator it = my_vec.begin ( );
              my_vec.end ( ) != it; ++it )
        {
            if ( V < it->B )
            {
                is_yes = false;
                break;
            }

            V -= it->A;
        }
        if ( is_yes )
        {
            cout << "Yes" << endl;
        }
        else
        {
            cout << "No" << endl;
        }
    }


    return 0;
}

